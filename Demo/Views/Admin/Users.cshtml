@* @using Demo.Models.ViewModels *@
@using X.PagedList.Extensions
@using X.PagedList.Mvc.Core
@model X.PagedList.IPagedList<Demo.Models.User>

@{
    Layout = "_AdminLayout";
}

<h1>User Management</h1>

<partial name="_SearchBar" 
         model="@(new SearchViewModel { 
             Placeholder = "Search user name", 
             Action = "Users", 
             Controller = "Admin", 
             Query = Context.Request.Query["query"].ToString(),
             Method = "GET"
         })" />

<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Updated At</th>
            <th>Operation</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in Model)
        {
            <tr>
                <td>@user.Id</td>
                <td>
                    @if (!string.IsNullOrEmpty(user.FirstName) || !string.IsNullOrEmpty(user.LastName))
                    {
                        @($"{user.FirstName} {user.LastName}".Trim())
                    }
                    else
                    {
                        @user.Name
                    }
                </td>
                <td>@user.Email</td>
                <td>@user.UpdatedAt</td>
                <td>
                    <a class="btn-edit" asp-controller="Admin" asp-action="UserEdit" asp-route-id="@user.Id">Manage</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="pagination-container">
        @Html.PagedListPager(
            Model,
            page => Url.Action("Users", new { page, query = Context.Request.Query["query"].ToString() }),
            new PagedListRenderOptions
            {
                UlElementClasses = new[] { "pagination" },
                LiElementClasses = new[] { "page-item" },
                PageClasses = new[] { "page-link" },
                ActiveLiElementClass = "active"
            }
        )
    </div>

@section Styles{
    
}