@* @using Demo.Models.ViewModels *@
@using X.PagedList.Extensions
@using X.PagedList.Mvc.Core
@model X.PagedList.IPagedList<Demo.Models.Job>

@{
    Layout = "_AdminLayout";
}

<h1>Job Management</h1>

<partial name="_SearchBar" 
         model="@(new SearchViewModel { 
             Placeholder = "Search title | company name", 
             Action = "Jobs", 
             Controller = "Admin", 
             Query = Context.Request.Query["query"].ToString(),
             Method = "GET"
         })" />

<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Recruiter</th>
            <th>Duration(Day)</th>
            <th>Updated At</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var job in Model)
        {
            <tr>
                <td>@job.Id</td>
                <td>@job.Title</td>
                <td>
                    @if (!string.IsNullOrEmpty(job.User.FirstName) || !string.IsNullOrEmpty(job.User.LastName))
                    {
                        @($"{job.User.FirstName} {job.User.LastName}".Trim())
                    }
                    else
                    {
                        @job.User.Name
                    }
                </td>
                <td>@((DateTime.Now - job.CreatedAt).Days)</td>
                <td>@job.UpdatedAt</td>
                <td>
                    <a class="btn-edit" asp-controller="Admin" asp-action="JobEdit" asp-route-id="@job.Id">Manage</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="pagination-container">
    @Html.PagedListPager(
        Model,
        page => Url.Action("Jobs", new { page, query = Context.Request.Query["query"].ToString() }),
        new PagedListRenderOptions
        {
            UlElementClasses = new[] { "pagination" },
            LiElementClasses = new[] { "page-item" },
            PageClasses = new[] { "page-link" },
            ActiveLiElementClass = "active"
        }
    )
</div>

@section Styles{

}